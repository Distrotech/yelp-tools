#!/bin/sh
# yelp-cache - Create a Mallard cache file
# Copyright (C) 2010 Shaun McCance <shaunm@gnome.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

xsl_mal_cache='@XSL_MAL_CACHE@'
xsl_db2html='@XSL_DB2HTML@'
xsl_db2xhtml='@XSL_DB2XHTML@'

urlencode () {
    echo "$1" | LANG=C awk '
BEGIN {
  for (i = 1; i <= 255; i++) chars[sprintf("%c", i)] = i;
}
{
  ret = "";
  for (i = 1; i <= length($0); i++) {
    c = substr($0, i, 1);
    if (c ~ /[\/a-zA-Z0-9._-]/)
      ret = ret c;
    else
      ret = ret sprintf("%%%X%X", int(chars[c] / 16), chars[c] % 16);
  }
  print ret;
}'
}

yelp_usage () {
    (
        echo "Usage: yelp-build <COMMAND> [OPTIONS] [FILES]"
        echo ""
        echo "Commands:"
        echo "  cache         Create a Mallard cache file"
        echo "  html          Convert input files to HTML"
        echo "  xhtml         Convert input files to XHTML"
    ) 1>&2
}
yelp_usage_cache () {
    (
        echo "Usage: yelp-build cache <FILES>"
        echo ""
        echo "  Create a Mallard cache file from the page files FILES."
        echo "  If FILES contains directories, all .page files in those"
        echo "  directories will be used."
    ) 1>&2
}
yelp_usage_html () {
    (
        echo "Usage: yelp-build <html|xhtml> [OPTIONS] <FILES>"
        echo ""
        echo "  Create HTML or XHTML from the input files FILES."
        echo "  FILES can be DocBook files, Mallard page files,"
        echo "  Mallard cache files, or directories containing"
        echo "  Mallard page files."
        echo ""
        echo "Options:"
        echo "  -o OUT        Output files in the directory OUT"
    ) 1>&2
}

if [ $# = 0 ]; then
    yelp_usage
    exit 1
fi

yelp_cache_ls () {
    fbase=`basename "$1"`
    fdir=`dirname "$1"`
    fdir=`(cd "$fdir" && pwd)`
    echo '<page cache:href="file://'`urlencode "$fdir/$fbase"`'"/>'
}
yelp_cache () {
    cache_out="index.cache"
    while [ "$#" != "0" ]; do
        case "$1" in
            "-o")
                shift
                cache_out="$1"
                shift
                ;;
            *)
                break
                ;;
        esac
    done
    if [ "$#" = "0" ]; then
        yelp_usage_cache
        exit 1
    fi
    (
        echo '<cache:cache xmlns:cache="http://projectmallard.org/cache/1.0/"'
        echo '  xmlns="http://projectmallard.org/1.0/">'
        for page in "$@"; do
            if [ -d "$page" ]; then
                for sub in "$page"/*.page; do
                    yelp_cache_ls "$sub"
                done
            else
                yelp_cache_ls "$page"
            fi
        done
        echo '</cache:cache>'
    ) | xsltproc -o "$cache_out" "$xsl_mal_cache" -
}

yelp_html_xsl_css_js () {
    echo '<xsl:variable name="yelp.locale">'
    echo ' <xsl:choose>'
    echo '  <xsl:when test="$l10n.locale != '"''"'">'
    echo '   <xsl:value-of select="$l10n.locale"/>'
    echo '  </xsl:when>'
    echo '  <xsl:otherwise>'
    echo '   <xsl:text>C</xsl:text>'
    echo '  </xsl:otherwise>'
    echo ' </xsl:choose>'
    echo '</xsl:variable>'
    echo '<xsl:template name="html.css">'
    echo ' <xsl:param name="node" select="."/>'
    echo ' <exsl:document href="{$yelp.locale}.css">'
    echo '  <xsl:call-template name="html.css.content">'
    echo '   <xsl:with-param name="node" select="$node"/>'
    echo '  </xsl:call-template>'
    echo ' </exsl:document>'
    echo ' <link rel="stylesheet" type="text/css" href="{$yelp.locale}.css"/>'
    echo '</xsl:template>'
}
yelp_html_db2html () {
    for xml in "$@"; do
        (
            echo '<xsl:stylesheet'
            echo ' xmlns:xsl="http://www.w3.org/1999/XSL/Transform"'
            echo ' xmlns:exsl="http://exslt.org/common"'
            echo ' extension-element-prefixes="exsl"'
            echo ' version="1.0">'
            if [ "x$is_xhtml" = "x1" ]; then
                xsl='file://'`urlencode "$xsl_db2xhtml"`
            else
                xsl='file://'`urlencode "$xsl_db2html"`
            fi
            echo '<xsl:import href="'"$xsl"'"/>'
            yelp_html_xsl_css_js
            echo '</xsl:stylesheet>'
        ) | xsltproc --xinclude -o "$html_out"/ - "$xml"
    done
}

yelp_html_mal2html () {
    echo "FIXME"
}

yelp_html () {
    html_out="."
    while [ "$#" != "0" ]; do
        case "$1" in
            "-o")
                shift
                html_out="$1"
                shift
                ;;
            *)
                break
                ;;
        esac
    done
    if [ ! -d "$html_out" ]; then
        echo "Error: output must be a directory." 1>&2
        exit 1
    fi
    html_out=`(cd "$html_out" && pwd)`
    if [ "$#" = "0" ]; then
        yelp_usage_html
        exit 1
    fi
    ext=`echo "$1" | sed -e 's/.*\.//'`
    if [ "x$ext" = "xxml" -o "x$ext" = "xdocbook" ]; then
        yelp_html_db2html "$@"
    else
        yelp_html_mal2html "$@"
    fi
}

cmd="$1"
shift
case "x$cmd" in
    "xcache")
        yelp_cache "$@"
        ;;
    "xhtml")
        is_xhtml=0
        yelp_html "$@"
        ;;
    "xxhtml")
        is_xhtml=1
        yelp_html "$@"
        ;;
    *)
        yelp_usage
        ;;
esac
