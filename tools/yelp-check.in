#!/bin/sh
# yelp-check
# Copyright (C) 2011 Shaun McCance <shaunm@gnome.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

xsl_mal_link='@XSL_MAL_LINK@'
xsl_mal_rng='@DATADIR@/xslt/mal-rng.xsl'

urlencode () {
    echo "$1" | LANG=C awk '
BEGIN {
  for (i = 1; i <= 255; i++) chars[sprintf("%c", i)] = i;
}
{
  ret = "";
  for (i = 1; i <= length($0); i++) {
    c = substr($0, i, 1);
    if (c ~ /[\/a-zA-Z0-9._-]/)
      ret = ret c;
    else
      ret = ret sprintf("%%%X%X", int(chars[c] / 16), chars[c] % 16);
  }
  print ret;
}'
}

yelp_usage () {
    (
        echo "Usage: yelp-check <COMMAND> [OPTIONS] [FILES]"
        echo ""
        echo "Commands:"
        echo "  orphans       Find orphaned pages in a Mallard document"
        echo "  links         Find broken xref links in a Mallard document"
        echo "  validate      Validate files against a DTD or RNG"
    ) 1>&2
}
yelp_usage_links () {
    (
        echo "Usage: yelp-check links <FILES>"
        echo ""
	echo "  Find broken xref links in <FILES> in a Mallard document."
	echo ""
        echo "Options:"
        echo "  -c CACHE      Use the existing Mallard cache CACHE"
    ) 1>&2
}
yelp_usage_orphans () {
    (
        echo "Usage: yelp-check orphans <FILES>"
        echo ""
	echo "  Locate orphaned pages among <FILES> in a Mallard document."
	echo "  Orphaned pages are any pages that cannot be reached by"
	echo "  topic links alone from the index page."
	echo ""
        echo "Options:"
        echo "  -c CACHE      Use the existing Mallard cache CACHE"
    ) 1>&2
}
yelp_usage_validate () {
    (
        echo "Usage: yelp-check validate <FILES>"
        echo ""
        echo "  Validate FILES against the appropriate DTD or RNG."
        echo "  For Mallard pages, perform automatic RNG merging"
        echo "  based on the version attribute."
    ) 1>&2
}

if [ $# = 0 ]; then
    yelp_usage
    exit 1
fi

yelp_links_page () {
    (
	echo '<xsl:stylesheet'
	echo ' xmlns:xsl="http://www.w3.org/1999/XSL/Transform"'
	echo ' xmlns:mal="http://projectmallard.org/1.0/"'
	echo ' xmlns:exsl="http://exslt.org/common"'
	echo ' extension-element-prefixes="exsl"'
	echo ' version="1.0">'
        xsl='file://'`urlencode "$xsl_mal_link"`
        echo '<xsl:import href="'"$xsl"'"/>'
        check_cache_url='file://'`urlencode "$check_cache_file"`
        echo '<xsl:param name="mal.cache.file" select="'"'$check_cache_url'"'"/>'
	echo '<xsl:output method="text"/>'
	echo '<xsl:template match="/mal:page">'
	echo ' <xsl:variable name="page" select="@id"/>'
	echo ' <xsl:for-each select="//*[@xref]">'
	echo '  <xsl:variable name="xref" select="@xref"/>'
	echo '  <xsl:variable name="linkid">'
	echo '   <xsl:call-template name="mal.link.xref.linkid"/>'
	echo '  </xsl:variable>'
	echo '  <xsl:for-each select="$mal.cache">'
	echo '   <xsl:variable name="target" select="key('"'mal.cache.key'"', $linkid)"/>'
	echo '   <xsl:if test="count($target) = 0">'
	echo '    <xsl:value-of select="$page"/>'
	echo '    <xsl:text>: </xsl:text>'
	echo '    <xsl:value-of select="$xref"/>'
	echo '    <xsl:text>&#x000A;</xsl:text>'
	echo '   </xsl:if>'
	echo '  </xsl:for-each>'
	echo ' </xsl:for-each>'
	echo '</xsl:template>'
	echo '</xsl:stylesheet>'
    ) | xsltproc --xinclude - "$1"
}

yelp_links () {
    if [ "$#" = "0" -o "x$1" = "x--help" ]; then
        yelp_usage_links
        exit 1
    fi
    while [ "$#" != "0" ]; do
        case "$1" in
            "-c")
                shift
                check_cache_file="$1"
                shift
                ;;
            *)
                break
                ;;
        esac
    done
    if [ "x$check_cache_file" != "x" ]; then
        check_cache_file=`(cd $(dirname "$check_cache_file") && pwd)`/`basename "$check_cache_file"`
    else
        check_cache_file_is_tmp="yes"
        check_cache_file=`mktemp`
        yelp-build cache -o "$check_cache_file" "$@"
    fi
    check_out_file=`mktemp`
    for xml in "$@"; do
        if [ -d "$xml" ]; then
            for page in "$xml"/*.page; do
                yelp_links_page "$page"
            done
        else
            yelp_links_page "$xml"
        fi
    done > "$check_out_file"
    ret=`cat "$check_out_file" | wc -l`
    if test "x$ret" != "x0"; then ret="1"; fi
    cat "$check_out_file"
    if [ "x$check_cache_file_is_tmp" = "xyes" ]; then
	rm "$check_cache_file"
    fi
    rm "$check_out_file"
    exit $ret
}

yelp_orphans_page () {
    (
	echo '<xsl:stylesheet'
	echo ' xmlns:xsl="http://www.w3.org/1999/XSL/Transform"'
	echo ' xmlns:mal="http://projectmallard.org/1.0/"'
	echo ' xmlns:exsl="http://exslt.org/common"'
	echo ' extension-element-prefixes="exsl"'
	echo ' version="1.0">'
        xsl='file://'`urlencode "$xsl_mal_link"`
        echo '<xsl:import href="'"$xsl"'"/>'
        check_cache_url='file://'`urlencode "$check_cache_file"`
        echo '<xsl:param name="mal.cache.file" select="'"'$check_cache_url'"'"/>'
	echo '<xsl:output method="text"/>'
	echo '<xsl:template match="/mal:page">'
	echo ' <xsl:variable name="trails">'
	echo '  <xsl:call-template name="mal.link.linktrails"/>'
	echo ' </xsl:variable>'
	echo ' <xsl:if test="@id != '"'index'"' and count(exsl:node-set($trails)/*) = 0">'
	echo '  <xsl:value-of select="@id"/>'
	echo '  <xsl:text>&#x000A;</xsl:text>'
	echo ' </xsl:if>'
	echo '</xsl:template>'
	echo '</xsl:stylesheet>'
    ) | xsltproc --xinclude - "$1"
}

yelp_orphans () {
    if [ "$#" = "0" -o "x$1" = "x--help" ]; then
        yelp_usage_orphans
        exit 1
    fi
    while [ "$#" != "0" ]; do
        case "$1" in
            "-c")
                shift
                check_cache_file="$1"
                shift
                ;;
            *)
                break
                ;;
        esac
    done
    if [ "x$check_cache_file" != "x" ]; then
        check_cache_file=`(cd $(dirname "$check_cache_file") && pwd)`/`basename "$check_cache_file"`
    else
        check_cache_file_is_tmp="yes"
        check_cache_file=`mktemp`
        yelp-build cache -o "$check_cache_file" "$@"
    fi
    check_out_file=`mktemp`
    for xml in "$@"; do
        if [ -d "$xml" ]; then
            for page in "$xml"/*.page; do
                yelp_orphans_page "$page"
            done
        else
            yelp_orphans_page "$xml"
        fi
    done > "$check_out_file"
    ret=`cat "$check_out_file" | wc -l`
    if test "x$ret" != "x0"; then ret="1"; fi
    cat "$check_out_file"
    if [ "x$check_cache_file_is_tmp" = "xyes" ]; then
	rm "$check_cache_file"
    fi
    rm "$check_out_file"
    exit $ret
}

yelp_validate_page () {
    # Using temp files because pipes create subshells, making it really
    # hard to return the right exit status in a portable way.
    check_rng_file=`mktemp`
    check_out_file=`mktemp`
    xsltproc -o "$check_rng_file" "$xsl_mal_rng" "$1"
    xmllint --noout --xinclude --noent --relaxng "$check_rng_file" "$1" > "$check_out_file" 2>&1
    ret="$?"
    cat "$check_out_file" | grep -v 'validates$'
    rm "$check_rng_file" "$check_out_file"
    return $ret;
}

yelp_validate () {
    if [ "$#" = "0" -o "x$1" = "x--help" ]; then
        yelp_usage_validate
        exit 1
    fi
    gret="0"
    for xml in "$@"; do
        if [ -d "$xml" ]; then
            for page in "$xml"/*.page; do
                yelp_validate_page "$page" || gret="$?"
            done
        else
            yelp_validate_page "$xml" || gret="$?"
        fi
    done
    exit "$gret"
}

cmd="$1"
shift
case "x$cmd" in
    "xlinks")
        yelp_links "$@"
        ;;
    "xorphans")
        yelp_orphans "$@"
        ;;
    "xvalidate")
        yelp_validate "$@"
        ;;
    *)
        yelp_usage
        ;;
esac
